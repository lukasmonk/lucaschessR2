import Code


def level(num):
    return _("Level %1").replace("%1", str(num))


def categoria(key):
    return {
        "FUTUROPRINCIPIANTE": _("Future beginner"),
        "PRINCIPIANTE": _("Beginner"),
        "AFICIONADO": _("Amateur"),
        "CANDIDATOMAESTRO": _("Candidate Master"),
        "MAESTRO": _("Master"),
        "CANDIDATOGRANMAESTRO": _("International Master"),
        "GRANMAESTRO": _("Grandmaster"),
        "ALUCINANTE": _("Mind-bending"),
    }[key]


def pgn_label(key):
    if key:
        return {
            "EVENT": _("Event"),
            "SITE": _("Site"),
            "DATE": _("Date"),
            "ROUND": _("Round"),
            "WHITE": _("White"),
            "BLACK": _("Black"),
            "RESULT": _("Result"),
            "COMMENT": _("Comment"),
            "ECO": _("ECO"),
            "FEN": _("FEN"),
            "PLIES": _("Movements"),
            "WHITEELO": _("White elo"),
            "BLACKELO": _("Black elo"),
            "PLYCOUNT": _("Movements"),
            "OPENING": _("Opening"),
        }.get(key, _F(key))
    else:
        return ""


def dic_nom_pieces():
    return {"K": _("King"), "N": _("Knight"), "B": _("Bishop"), "Q": _("Queen"), "R": _("Rook"), "P": _("Pawn")}


dConvTR = [{}]


def dic_conv():
    return dConvTR[0]


def conv_dic():
    return {v: k for k, v in dConvTR[0].items()}


def pon_pieces_lng(si_en):
    dConvTR[0] = {} if si_en else {"K": _("K"), "N": _("N"), "B": _("B"), "Q": _("Q"), "R": _("R")}


def letter_piece(piece):
    p = piece.upper()
    return dConvTR[0].get(p, p)


def dic_training():
    d = {
        "Checkmates by Eduardo Sadier": _("Checkmates by Eduardo Sadier"),
        "%d positions of mate in two"
        % Code.mate_en_dos: _("50000 positions of mate in two").replace("50000", "%d" % Code.mate_en_dos),
        "Mate in one (derived from mate in two)": _("Mate in one (derived from mate in two)"),
        "Checkmates from FICS database": _("Checkmates from FICS database"),
        "Attacking the king in the castle M1": _("Attacking the king in the castle M1"),
        "Attacking the king in the castle M2-7": _("Attacking the king in the castle M2-7"),
        "Endings with just pawns": _("Endings with just pawns"),
        "Endings with pawns and rooks": _("Endings with pawns and rooks"),
        "The kick of the knight": _("The kick of the knight"),
        "Checkmates in GM games": _("Checkmates in GM games"),
        "Endgames by Rui Grafino": _("Endgames by Rui Grafino"),
        "Famous Studies": _("Famous Studies"),
        "Arabic.Manuscript.Position.1140.[White always win]": _("Arabic.Manuscript.Position.1140.[White always win]"),
        "Centurini.Position.[White to play and win]": _("Centurini.Position.[White to play and win]"),
        "Lucena.Position.[White to play and win]": _("Lucena.Position.[White to play and win]"),
        "Philidor.Position.[Black to play and White draws]": _("Philidor.Position.[Black to play and White draws]"),
        "Reti.Position.[White to play and draw]": _("Reti.Position.[White to play and draw]"),
        "Saavedra.Position.[White to play and win]": _("Saavedra.Position.[White to play and win]"),
        "Vancura.Position.[White to play and Black draws]": _("Vancura.Position.[White to play and Black draws]"),
        "Major Pieces Endings": _("Major Piece Endings"),
        "King.And.Two.Rooks": _("King and Two Rooks"),
        "King.And.Two.Rooks.Vs.King.And.Queen": _("King and Two Rooks Versus King and Queen"),
        "King.And.Two.Rooks.Vs.King.And.Rook": _("King and Two Rooks Versus King and Rook"),
        "Major Vs Minor Pieces Endings": _("Major Versus Minor Piece Endings"),
        "King.And.Queen.Versus.King.And.Bishop": _("King and Queen Versus King and Bishop"),
        "King.And.Queen.Versus.King.And.Knight": _("King and Queen Versus King and Knight"),
        "King.And.Rook.Versus.King.And.Bishop": _("King and Rook Versus King and Bishop"),
        "King.And.Rook.Versus.King.And.Knight": _("King and Rook Versus King and Knight"),
        "Pawns Breaks": _("Pawn Breaks"),
        "Complex.Pawns.Break.[Black to play and win]": _("Complex.Pawns.Break.[Black to play and win]"),
        "Four.Pawns.Break.[White to play and win]": _("Four.Pawns.Break.[White to play and win]"),
        "Outside.Passed.Pawn.Break.[White to play and win]": _("Outside.Passed.Pawn.Break.[White to play and win]"),
        "Three.Pawns.Easy.Break.[White to play and win]": _("Three.Pawns.Easy.Break.[White to play and win]"),
        "The Four Basic Mates": _("The Four Basic Mates"),
        "2 Bishops Mate": _("2 Bishops Mate"),
        "King and Queen Mate": _("King and Queen Mate"),
        "King and Rook Mate": _("King and Rook Mate"),
        "Knight and Bishop Mate": _("Knight and Bishop Mate"),
        "Tactics by Uwe Auerswald": _("Tactics by Uwe Auerswald"),
        "Decoy": _("Decoy"),
        "Deflection": _("Deflection"),
        "Different themes": _("Different themes"),
        "Drawing Combinations": _("Drawing Combinations"),
        "Interference": _("Interference"),
        "Pawn promotion": _("Pawn promotion"),
        "Pin": _("Pin"),
        "Removal of defence": _("Removal of defence"),
        "Removal": _("Removal"),
        "Technique by Michele Tumbarello": _("Technique by Michele Tumbarello"),
        "Middlegames, transition to favourable endgame": _("Middlegames, transition to favourable endgame"),
        "Middlegames, complicated positions": _("Middlegames, complicated positions"),
        "Middlegames, attack against castling": _("Middlegames, attack against castling"),
        "Endings, rooks and pawns": _("Endings, rooks and pawns"),
        "Endings, queens and pawns": _("Endings, queens and pawns"),
        "Endings, pawns": _("Endings, pawns"),
        "Endings, minor pieces and pawns": _("Endings, minor pieces and pawns"),
        "Endings, major pieces and pawns": _("Endings, major pieces and pawns"),
        "Endings, knights and pawns": _("Endings, knights and pawns"),
        "Endings, generic positions": _("Endings, generic positions"),
        "Endings, bishops and pawns": _("Endings, bishops and pawns"),
        "Middlegames, king in the center": _("Middlegames, king in the center"),
        "Varied positions by Joaquin Alvarez": _("Varied positions by Joaquin Alvarez"),
        "Giri-Nakamura": _("Giri-Nakamura"),
        "Capablanca positions": _("Capablanca positions"),
        "Nunn positions": _("Nunn positions"),
        "Mate in two with specific pieces": _("Mate in two with specific pieces"),
        "Categories": _("Categories"),
        "Difficulty": _("Difficulty"),
        "Endgames by Victor Perez": _("Endgames by Victor Perez"),
        "Various positions": _("Various positions"),
        "Personal Training": _("Personal Training"),
        "Selected positions": _("Selected positions"),
        "Tactics by UNED chess school": _("Tactics by UNED chess school"),
        # "Decoy": _("Decoy"),
        "Interception-blocade": _("Interception-blocade"),
        # "Pawn promotion": _("Pawn promotion"),
        "X-ray attack": _("X-Ray attack"),
        # "Pin": _("Pin"),
        "Discovered attack": _("Discovered attack"),
        "Annihilation of defense": _("Annihilation of defense"),
        "Double attack": _("Double attack"),
        "Attacking Defender": _("Attacking Defender"),
        "All tactics": _("All tactics"),
        "Pawn endings": _("Pawn endings"),
        "Singular moves to equalize": _("Singular moves to equalize"),
        "Singular moves to win": _("Singular moves to win"),
        "Queen + Rook": "%s + %s" % (_("Queen"), _("Rook")),
        "Queen + Bishop": "%s + %s" % (_("Queen"), _("Bishop")),
        "Queen + Knight": "%s + %s" % (_("Queen"), _("Knight")),
        "Rook + Bishop": "%s + %s" % (_("Rook"), _("Bishop")),
        "Rook + Knight": "%s + %s" % (_("Rook"), _("Knight")),
        "Knight + Bishop": "%s + %s" % (_("Knight"), _("Bishop")),
    }

    for n in range(1, 10):
        d["Mate in %d" % n] = _X(_("Mate in %1"), str(n))

    for n in range(1, 10):
        d["Level %d" % n] = level(n)
    return d


def list_sts():
    return [
        _("Undermining"),
        _("Open Files and Diagonals"),
        _("Knight Outposts"),
        _("Square Vacancy"),
        _("Bishop vs Knight"),
        _("Re-Capturing"),
        _("Offer of Simplification"),
        _("Advancement of f/g/h Pawns"),
        _("Advancement of a/b/c Pawns"),
        _("Simplification"),
        _("Activity of the King"),
        _("Center Control"),
        _("Pawn Play in the Center"),
        _("Queens and Rooks to the 7th Rank"),
        _("Avoid Pointless Exchange"),
    ]


def micelo_wicker():
    li_micelo = (
        _("slow"),
        _("fast"),
        _("very fast"),
        _("aggressive"),
        _("very aggressive"),
        _("precise"),
        _("very precise"),
        _("imprecise"),
        _("very imprecise"),
        _("extremely imprecise"),
        _("tactically vulnerable"),
        _("tactically weak"),
        _("tactical"),
        _("strategical"),
        _("positional"),
        _("technical"),
        _("very technical"),
        _("materialist"),
        _("creative"),
        _("active"),
        _("dynamic"),
        _("balanced"),
        _("solid"),
        _("very solid"),
        _("positionally oriented"),
        _("aims to endgame"),
        _("very combative"),
        _("very conservative"),
        _("counterattacker"),
        _("combative"),
        _("extremely precise"),
        _("wide repertoire"),
    )
    li_wicker = (
        _("Alekhine's openings"),
        _("Anand's openings"),
        _("Botvinnik's openings"),
        _("Capablanca's openings"),
        _("Carlsen's openings"),
        _("Catalan"),
        _("Euwe's openings"),
        _("Fischer's openings"),
        _("Italian"),
        _("Karpov's openings"),
        _("Kramnik's openings"),
        _("Lasker's openings"),
        _("Najdorf"),
        _("Petrosian's openings"),
        _("Queen's gambit"),
        _("Scotch"),
        _("Sicilian"),
        _("Smyslov's openings"),
        _("Spassky's openings"),
        _("Steinitz' openings"),
        _("Tal's openings"),
        _("active"),
        _("aggressive"),
        _("attacker"),
        _("bad endgame"),
        _("balanced"),
        _("blunders"),
        _("blunders a lot"),
        _("classical"),
        _("combative"),
        _("counterattacker"),
        _("creative"),
        _("defensive"),
        _("development is nonsense"),
        _("e4 + f4 on almost everything"),
        _("exotic openings"),
        _("fast"),
        _("fianchettos"),
        _("flank openings"),
        _("gambit openings"),
        _("human-like"),
        _("ignores pawn structure"),
        _("likes blocked positions"),
        _("likes closed positions"),
        _("likes endgames"),
        _("likes grabbing space"),
        _("likes sacrifices"),
        _("likes simplification and knights"),
        _("likes to attack"),
        _("likes to capture"),
        _("likes to simplify"),
        _("lots and lots of blundering"),
        _("mad attacker"),
        _("materialist"),
        _("may forget development"),
        _("might blunder"),
        _("no openings book"),
        _("noob"),
        _("overvalues pawns"),
        _("passive"),
        _("pawn storm"),
        _("pawn structure"),
        _("positional"),
        _("positionally weak"),
        _("random moves"),
        _("sacrificing attacker"),
        _("slightly materialistic"),
        _("slow"),
        _("small repertoire"),
        _("solid"),
        _("solid openings"),
        _("strange style"),
        _("strangler"),
        _("technical"),
        _("very aggressive"),
        _("very fast"),
        _("very precise"),
        _("very slow"),
        _("very solid"),
        _("weak endgame"),
        _("weak opening"),
        _("weak openings"),
        _("wide repertoire"),
    )
    return li_micelo, li_wicker


def transsiberian():
    return {
        "Yaroslavl": _("Yaroslavl"),
        "Kirov": _("Kirov"),
        "Perm": _("Perm"),
        "MOSCOW": _("MOSCOW"),
        "Tyumen": _("Tyumen"),
        "Omsk": _("Omsk"),
        "Novosibirsk": _("Novosibirsk"),
        "Krasnoyarsk": _("Krasnoyarsk"),
        "Tayshet": _("Tayshet"),
        "Irkutsk": _("Irkutsk"),
        "Ulan-Ude": _("Ulan-Ude"),
        "Chita": _("Chita"),
        "Belogorsk": _("Belogorsk"),
        "Khabarovsk": _("Khabarovsk"),
        "Vladivostok": _("Vladivostok"),
        "Moscow": _("Moscow"),
        "Khotkovo": _("Khotkovo"),
        "Sergiyev Posad": _("Sergiyev Posad"),
        "Alexandrov": _("Alexandrov"),
        "Balakirevo": _("Balakirevo"),
        "Berendeevo": _("Berendeevo"),
        "Petrovskoye": _("Petrovskoye"),
        "Rostov Yaroslavsky": _("Rostov Yaroslavsky"),
        "Danilov": _("Danilov"),
        "Lyubim": _("Lyubim"),
        "Bui": _("Bui"),
        "Galich": _("Galich"),
        "Manturovo": _("Manturovo"),
        "Sharya": _("Sharya"),
        "Svetcha": _("Svetcha"),
        "Kotelnich": _("Kotelnich"),
        "Pozdino": _("Pozdino"),
        "Bum-Kombinat": _("Bum-Kombinat"),
        "Zuevka": _("Zuevka"),
        "Yar": _("Yar"),
        "Glazov": _("Glazov"),
        "Balyezino": _("Balyezino"),
        "Chepsta": _("Chepsta"),
        "Vereshchagino": _("Vereshchagino"),
        "Mendeleevo": _("Mendeleevo"),
        "Chaikovskaya": _("Chaikovskaya"),
        "Overyata": _("Overyata"),
        "Ferma": _("Ferma"),
        "Kungur": _("Kungur"),
        "Shalya": _("Shalya"),
        "Kuzino": _("Kuzino"),
        "Krylosovo": _("Krylosovo"),
        "Pervouralsk": _("Pervouralsk"),
        "Yekaterinburg": _("Yekaterinburg"),
        "Bogdanovich": _("Bogdanovich"),
        "Kamyshlov": _("Kamyshlov"),
        "Talitsa": _("Talitsa"),
        "Yushala": _("Yushala"),
        "Yalutorovsk": _("Yalutorovsk"),
        "Ishim": _("Ishim"),
        "Nazyvayevsk": _("Nazyvayevsk"),
        "Kalachinsk": _("Kalachinsk"),
        "Tatarsk": _("Tatarsk"),
        "Barabinsk": _("Barabinsk"),
        "Chulym": _("Chulym"),
        "Ob": _("Ob"),
        "Bolotnaya": _("Bolotnaya"),
        "Yurga": _("Yurga"),
        "Tayga": _("Tayga"),
        "Anzhero-Sudzhensk": _("Anzhero-Sudzhensk"),
        "Mariinsk": _("Mariinsk"),
        "Bogotol": _("Bogotol"),
        "Achinsk": _("Achinsk"),
        "Chernorechensk": _("Chernorechensk"),
        "Uyar": _("Uyar"),
        "Zaozyornaya": _("Zaozyornaya"),
        "Kansk-Yeniseysky": _("Kansk-Yeniseysky"),
        "Ilanskaya": _("Ilanskaya"),
        "Razgon": _("Razgon"),
        "Kamyshet": _("Kamyshet"),
        "Nizhneudinsk": _("Nizhneudinsk"),
        "Tulun": _("Tulun"),
        "Kuytun": _("Kuytun"),
        "Zima": _("Zima"),
        "Kutulik": _("Kutulik"),
        "Cheremkhovo": _("Cheremkhovo"),
        "Polovina": _("Polovina"),
        "Usolye-Sibirskoye": _("Usolye-Sibirskoye"),
        "Telma": _("Telma"),
        "Angarsk": _("Angarsk"),
        "Meget": _("Meget"),
        "Irkutsk-Sort": _("Irkutsk-Sort"),
        "Slyudyanka": _("Slyudyanka"),
        "Baykalsk": _("Baykalsk"),
        "Vydrino": _("Vydrino"),
        "Tankhoi": _("Tankhoi"),
        "Mysovaya": _("Mysovaya"),
        "Posolskaya": _("Posolskaya"),
        "Selenginsk": _("Selenginsk"),
        "Onokhoy": _("Onokhoy"),
        "Novoilinski": _("Novoilinski"),
        "Petrovsk-Zabaykalsky": _("Petrovsk-Zabaykalsky"),
        "Bada": _("Bada"),
        "Khilok": _("Khilok"),
        "Mogzon": _("Mogzon"),
        "Sokhondo": _("Sokhondo"),
        "Yablonovaya": _("Yablonovaya"),
        "Darasun": _("Darasun"),
        "Karymskaya": _("Karymskaya"),
        "Onon": _("Onon"),
        "Shilka-Pass.": _("Shilka-Pass."),
        "Priiskovaya": _("Priiskovaya"),
        "Kuenga": _("Kuenga"),
        "Chernyshevsk-Zabaykalsky": _("Chernyshevsk-Zabaykalsky"),
        "Bushuley": _("Bushuley"),
        "Zilovo": _("Zilovo"),
        "Ksenevskaya": _("Ksenevskaya"),
        "Mogocha": _("Mogocha"),
        "Amazar": _("Amazar"),
        "Yerofei Pavlovich": _("Yerofei Pavlovich"),
        "Urusha": _("Urusha"),
        "Takhtamigda": _("Takhtamigda"),
        "Skovorodino": _("Skovorodino"),
        "Bolshoy Never": _("Bolshoy Never"),
        "Magdagachi": _("Magdagachi"),
        "Ushumun": _("Ushumun"),
        "Shimanovskaya": _("Shimanovskaya"),
        "Ledyanaya": _("Ledyanaya"),
        "Svobodny": _("Svobodny"),
        "Zavitaya": _("Zavitaya"),
        "Bureya": _("Bureya"),
        "Arkhara": _("Arkhara"),
        "Obluchye": _("Obluchye"),
        "Izvestkovaya": _("Izvestkovaya"),
        "Bira": _("Bira"),
        "Birobidzhan": _("Birobidzhan"),
        "Volochayevka": _("Volochayevka"),
        "Priamurskaya": _("Priamurskaya"),
        "Verino": _("Verino"),
        "Khor": _("Khor"),
        "Vyazemskaya": _("Vyazemskaya"),
        "Bikin": _("Bikin"),
        "Dalnerechensk": _("Dalnerechensk"),
        "Lazo": _("Lazo"),
        "Spassk-Dalny": _("Spassk-Dalny"),
        "Sibirtsevo": _("Sibirtsevo"),
        "Ussuriysk": _("Ussuriysk"),
        "Uglovaya": _("Uglovaya"),
    }


def transsiberian_1():
    return (_("Scholar's Mate"),
            _("Legal trap"),
            _("Petrov's Defence trap"),
            _("Sicilian defense trap"),
            _("Ruy Lopez trap"),
            _("Sicilian defense trap"),
            _("Morphy - Anderssen"),
            _("The Immortal Game"),
            )


def maps():
    return {"Africa": _("Africa map"), "WorldMap": _("World map")}


def styles():
    return [_("By default"), _("Dark"), _("Light")]


def installation():
    return {
        "act_cut": _(
            "It is not possible to upgrade from the installed version. To get the new version, it is necessary to do a complete installation from")
    }
